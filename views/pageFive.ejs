<div class="pageFive container active">
    <div class="map-container active" id="5-1">
        <div id="viewDiv5-1"></div>
    </div>
    <div class="map-container active" id="5-2">
        <div id="viewDiv5-2"></div>
    </div>
    <select id="area_select">
        <option value="0">宝山区</option>
        <option value="1">长宁区</option>
        <option value="2">奉贤区</option>
        <option value="3">虹口区</option>
        <option value="4">黄浦区</option>
        <option value="5">嘉定区</option>
        <option value="6">静安区</option>
        <option value="7">金山区</option>
        <option value="8">闵行区</option>
        <option value="9">浦东新区</option>              
        <option value="10">普陀区</option>       
        <option value="11">松江区</option>
        <option value="12">徐汇区</option>
        <option value="13">杨浦区</option>
    </select>
    <h2>文化产业重新规划</h2>
    <div id="main" style="width: 80%;height:400px;"></div>
</div>
<script>

  require([
      "esri/Map",
      "esri/views/MapView",
      "esri/layers/FeatureLayer",
      "esri/renderers/smartMapping/creators/size",
      "esri/renderers/smartMapping/statistics/histogram",
      "esri/widgets/SizeSlider",
      "esri/widgets/Legend",
      "esri/core/lang",
      "dojo/on",
      "dojo/domReady!"
    ], function(
      Map, MapView, FeatureLayer, sizeRendererCreator, histogram,
      SizeSlider, Legend, lang, on
    ) {

      // Create a map and add it to a MapView

      var map = new Map({
        basemap: "gray"
      });

      var view = new MapView({
        container: "viewDiv5-1",
        map: map,
        center: [121, 31],
        zoom: 6
      });

      var map2 = new Map({
        basemap: "gray"
      });

      var view2 = new MapView({
        container: "viewDiv5-2",
        map: map2,
        center: [121, 31],
        zoom: 6
      });

      
        map_urls = ["baoshanService", "changningService", "fengxianService", "hongkouService", "huangpuService", "jiadingService", "jinganService", 
        "jinshanService", "minghangService", "pudongService", "putuoService", "songjiangService", "xuhuiService", "yangpuService"];
        feature_layers = [];
        for (let i = 0, length = map_urls.length; i < length; i++) {
            let tmpLayer = new FeatureLayer({
                url: "https://192.168.1.50:6443/arcgis/rest/services/"+map_urls[i]+"/MapServer/0",
                visible:false
            });
            feature_layers.push(tmpLayer);
            map2.add(tmpLayer);  
            
        }
        let last = 0;
        feature_layers[0].visible =true;
        $("#area_select").change(function() {
            feature_layers[last].visible =false;
            last = parseInt($(this).val());
            feature_layers[last].visible =true
        })

        // var template = {
        //     title: "文化产业区域信息：",
        //     content: "<p>{Name}</p>" + "一共有{Join_Count}个文化产业",
        //     fieldInfos: [{
        //     fieldName: "MARRIED_CY",
        //     format: {
        //     digitSeparator: true, // Use a comma separator for large numbers
        //     places: 0 // Sets the number of decimal places to 0 and rounds up
        //     }
        // }, {
        //     fieldName: "NEVMARR_CY",
        //     format: {
        //     digitSeparator: true,
        //     places: 0
        //     }
        // }, {
        //     fieldName: "DIVORCD_CY",
        //     format: {
        //     digitSeparator: true,
        //     places: 0
        //     }
        // }]
        // };
        // // Create FeatureLayer instance with popupTemplate
        // var featureLayer = new FeatureLayer({
        //     url: "https://192.168.1.50:6443/arcgis/rest/services/culture_poi/MapServer/0",
        //     outFields: ["*"],
        //     popupTemplate: template
        // });

        // map.add(featureLayer)

        var povLyr = new FeatureLayer({
            url: "https://10.60.42.201:6443/arcgis/rest/services/NeighbourService/MapServer/0",
            outFields: ["*"],
            popupTemplate: {
            title: "{type}区 {name}",
            content: "{name} 的房价为 {price}."
        }
    });

      // configure parameters for the size renderer generator
      // the layer must be specified along with a field name.
      // The basemap and then determine
      // the appropriate default size scheme.

      var sizeParams = {
        layer: povLyr,
        basemap: map.basemap,
        field: "price",
        normalizationField: "avg_price",
        legendOptions: {
          title: "Ratio of people living in poverty"
        },
        minValue: 0.15
      };

      // Initialize the object containing size slider properties.
      var sliderParams = {
        container: "slider"
      };

      // Generate a continuous size renderer based on the
      // statistics of the data in the provided layer
      // and field.
      //
      // This resolves to an object containing several helpful
      // properties, including size scheme, statistics,
      // the renderer, and visual variable

      sizeRendererCreator.createContinuousRenderer(sizeParams)
        .then(function(response) {

          // set generated renderer on the layer and add it to the map

          povLyr.renderer = response.renderer;
          map.add(povLyr);

          // set the queried statistics and generated visual variable
          // to the slider parameters

          sliderParams.statistics = response.statistics;
          sliderParams.visualVariable = lang.clone(response.visualVariables[
            0]);

          // Create a legend and add it to the view's UI

          var legend = new Legend({
            view: view,
            layerInfos: [
            {
              layer: povLyr,
              title: "Poverty in the southeast U.S."
            }]
          });
          view.ui.add(legend, "bottom-right");

          // generate a histogram for use in the slider. Input the layer
          // and field name to generate it.

          return histogram({
            layer: povLyr,
            field: sizeParams.field,
            normalizationField: sizeParams.normalizationField,
            minValue: sizeParams.minValue
          });

        })
        .then(function(histogram) {

          // when the promise resolves, set the histogram in the slider parameters

          sliderParams.histogram = histogram;

          // input the slider parameters in the slider's constructor
          // and add it to the view's UI

          sizeSlider = new SizeSlider(sliderParams);
          view.ui.add("containerDiv", "bottom-left");

          // when the user slides the handle(s), update the renderer
          // with the updated color visual variable object
          on(sizeSlider, "handle-value-change", function() {
            var renderer = povLyr.renderer.clone();
            renderer.visualVariables = [lang.clone(sizeSlider.visualVariable)];
            povLyr.renderer = renderer;
          });
        })
        .otherwise(function(err) {
          console.log("there was an error: ", err);
        });
    });

</script>


<style>
    .pageFive.container {
        display: flex;
        display: -webkit-flex;
        flex-direction: column;
        align-items: center;
        height: 100%;
        overflow-y: auto;
    }

    .pageFive.container > div {
        margin: 20px;
    }

    .pageFive.container > h2 {
        align-self: flex-start;
        color: #0088f5;
        font-size: 1.2em;
        margin: 40px;
    }

    .pageFive.container.active {
        display: none;
    }

    #viewDiv5-1 {
        padding: 0;
        margin: 10px;
        height: 100%;
        width: 100%;
        max-width: calc(100% - 202px);
    }

    #viewDiv5-1.active {
        display: none;
    }

    #viewDiv5-2 {
        padding: 0;
        margin: 10px;
        height: 100%;
        width: 100%;
        max-width: calc(100% - 202px);
    }

    #viewDiv5-2.active {
        display: none;
    }


    /*.esri-view {*/
        /*overflow: auto !important;*/
    /*}*/
</style>